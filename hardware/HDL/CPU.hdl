// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Split out all of our control bits. If the incoming instruction is an A-instruction,
    // all control bits are zero.
    Mux16(a = false,
          b = instruction,
          sel = instruction[15],
          out[0] = ctlJumpIfGT, 
          out[1] = ctlJumpIfEq, 
          out[2] = ctlJumpIfLT,
          out[3] = ctlDestM, out[3] = writeM,
          out[4] = ctlDestD,
          out[5] = ctlDestA,
          out[6] = ctlAluNo,
          out[7] = ctlAluF,
          out[8] = ctlAluNy,
          out[9] = ctlAluZy,
          out[10] = ctlAluNx,
          out[11] = ctlAluZx,
          out[12] = ctlUseAAsPtr,
          // 13, 14 unused.
          out[15] = ctlIsCInstruction);

    ALU(x = xIn,  // data in
        y = yIn,  // data in
        zx = ctlAluZx, // control IN
        nx = ctlAluNx, // control IN
        zy = ctlAluZy, // control IN
        ny = ctlAluNy, // control IN
        f =  ctlAluF,  // control IN
        no = ctlAluNo, // control IN
        zr = zrOut, // control OUT
        ng = ngOut, // control OUT
        out = aluOut, out = outM);


    // A-Register input Mux
    Mux16(a = instruction, 
          b = aluOut,
          sel = ctlIsCInstruction,
          out = aMuxOut);

    // ALU Y-input Mux
    Mux16(a = aRegOut,
          b = inM,
          sel = ctlUseAAsPtr,
          out = yIn);

    // The A register can be loaded from a ALU output of a C-instruction, or by 
    // A-instruction.
    Not(in = ctlIsCInstruction, out=isAInstruction);
    Or(a = ctlDestA, b = isAInstruction, out = loadA);
    ARegister(in = aMuxOut,
              load = loadA,
              out = aRegOut, out[0..14] = addressM);
    DRegister(in = aluOut,
              load = ctlDestD,
              out = xIn);

    // Jumps!
    // Jump bits are instruction[0..2].
    // Let's make a new bit for greater than.
    Or(a = zrOut,
       b = ngOut,
       out = lessThanOrEqual);
    Not(in = lessThanOrEqual, out = isGT);

    // Three possible conditions under which we jump:
    And(a = ctlJumpIfEq,
        b = zrOut,
        out = jumpBecauseEq);
    And(a = ctlJumpIfLT,
        b = ngOut,
        out = jumpBecauseLT);
    And(a = ctlJumpIfGT,
        b = isGT,
        out = jumpBecauseGT);

    // If any of them are true, jump.
    Or(a = jumpBecauseEq,
       b = jumpBecauseLT,
       out = jumpBecauseLTEQ);
    Or(a = jumpBecauseLTEQ,
       b = jumpBecauseGT,
       out = jump);

    PC(in = aRegOut,
       load = jump,
       inc = true,
       reset = reset,
       out[0..14] = pc, out[15] = false);
}