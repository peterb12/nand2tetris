// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0]  = 1;
        let twoToThe[1]  = 2;
        let twoToThe[2]  = 4;
        let twoToThe[3]  = 8;
        let twoToThe[4]  = 16;
        let twoToThe[5]  = 32;
        let twoToThe[6]  = 64;
        let twoToThe[7]  = 128;
        let twoToThe[8]  = 256;
        let twoToThe[9]  = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    // Returns true if the ith bit of x is 1, false otherwise
    function boolean _bit(int x, int i) {
        var boolean retVal;
        let retVal = false;
        let retVal = x & twoToThe[i];
        return retVal;
    }
    
    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return -x;
      }
      return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, ix;
        var boolean neg;

        // Escape hatch for trivial cases.
        if ((x = 0) | (y = 0)) {
            return 0;
        }
        if (x = 1) {
            return y;
        }
        if (y = 1) {
            return x;
        }
        if (x = -1) {
            return -y;
        }
        if (y = -1) {
            return -x;
        }
        // Handle negatives.
        if (((x > 0) & (y > 0)) | ((x < 0) & (y < 0))) {
            let neg = false;
        } else {
            let neg = true;
        }
        let x = Math.abs(x);
        let y = Math.abs(y);

        let sum = 0;
        let shiftedX = x;
        let ix = 0;
        while (ix < 16) {
            if (Math._bit(y, ix)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let ix = ix + 1;
        }
        if (neg) {
            let sum = -sum;
        }
        return sum;
    }
    
    function int naiveMultiply(int x, int y) {
        // Slow implementation
        var int sum, multiplier, multiplicand;
        var boolean neg;
        
        if (((x > 0) & (y > 0)) | ((x < 0) & (y < 0))) {
            let neg = false;
        } else {
            let neg = true;
        }
        let x = Math.abs(x);
        let y = Math.abs(y);
        
        let sum = 0;
        if (x < y) {
            let multiplier = x;
            let multiplicand = y;
        } else {
            let multiplier = y;
            let multiplicand = x;
        }
        while (multiplier > 0) {
            let sum = sum + multiplicand;
            let multiplier = multiplier - 1;
        }
        if (neg) {
            let sum = -sum;
        }
            
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, result, doubleY;
        var boolean neg;

        if (((x > 0) & (y > 0)) | ((x < 0) & (y < 0))) {
            let neg = false;
        } else {
            let neg = true;
        }
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }
        let doubleY = y + y;
        if (doubleY < 0) {
            return 0;
        }
        let q = Math.divide(x, doubleY);
        if ((x - (2 * q * y)) < y) {
            let result = q + q;
        } else {
            let result = q + q + 1;
        }
        if (neg) {
            let result = -result;
        }
        return result;
    }
    
    function int naiveDivide(int x, int y) {
        var int quotient;
        var boolean neg;

        if (y = 0) {
            do Sys.error(2);
        }
        if (((x > 0) & (y > 0)) | ((x < 0) & (y < 0))) {
            let neg = false;
        } else {
            let neg = true;
        }
        let x = Math.abs(x);
        let y = Math.abs(y);

        while (x > 0) {
            let quotient = quotient + 1;
            let x = x - y;
        }
        if (neg) {
            let quotient = -quotient;
        }
        return quotient;
    }

    // Find an integer y such that:
    //   y^2 <= x < (y+1)^2 (for 0 <= x < 2^n)
    //   by performing a binary search in the range:
    //   0 .. 2^(n/2) - 1
    function int sqrt(int x) {
        var int y, j, approx, approxsquared;
        // We have 16 bits, so thus n is 16.  n/2 - 1 is 7.
        let j = 7;
        while (j > -1) {
            let approx = y + twoToThe[j];
            let approxsquared = approx * approx;
            if (~(approxsquared > x | approxsquared < 0)) {
                let y = approx;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) {
        return a;
      }
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) {
        return a;
      }
      return b;
    }
}
