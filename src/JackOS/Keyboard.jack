// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int kbmmap;
    static char newLine;
    static char backspace;
    
    /** Initializes the keyboard. */
    function void init() {
        let kbmmap = 24576;
        let newLine = String.newLine();
        let backspace = String.backSpace();
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(kbmmap);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char inChar, sink;

        let inChar = Keyboard.keyPressed();
        while (~(inChar = 0)) {
            do Sys.wait(5);
        }
        // Keypress is 0.
        while (inChar = 0) {
            do Sys.wait(5);
            let inChar = Keyboard.keyPressed();
        }
        let sink = inChar;
        while (~(sink = 0)) {
            do Sys.wait(5);
            let sink = Keyboard.keyPressed();            
        }
        return inChar;
        
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var char inChar;
        var String inString;

        let inString = String.new(128); // Magic number.
        do Output.printString(message);
        while (~(inChar = newLine) & (inString.length() < 128)) {
            let inChar = Keyboard.readChar();
            if ((inChar = backspace) & (inString.length() > 0)) {
                do inString.eraseLastChar();
                do Output.backSpace();
            } else {
                if (~(inChar = newLine)) {
                    do inString.appendChar(inChar);
                    do Output.printChar(inChar);
                }
            }
        }
        return inString;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var int    intVal;
        var String inString;

        let inString = Keyboard.readLine(message);
        let intVal = inString.intValue();
        
        return intVal;
    }
}
